#!/bin/bash
#
# Script zieht per rsync Backups
# http://www.heinlein-partner.de
#
# Aufruf: backup-rsync <fqdn-servername>
#

# ### Aufrufparameter des Scripts ist ein FQDN-Hostname
if [ -n "$1" ] ; then
        SERVER="$1"
else
        echo "Error: to few arguments"
        exit
fi

if [ -n "$2" ] ; then
        SERVERDIR="$2"
else
        echo "Error: to few arguments"
        exit
fi

# Unter welchem Pfad wird gesichert?
if [ -n "$3" ] ; then
    DATA_PATH="$3"
else
    DATA_PATH=/home/data2/backup
fi

SSH="-e ssh"
SSHSERVER="$SERVER:"

if [ $SERVER = "localhost" ] ; then
        SSHSERVER=""
        SSH=""
fi

# ### Konfiguration
# Sollen wir pruefen, ob noch ein gewisser Prozentsatz
# an Plattenplatz und Inodes frei ist?
CHECK_HDMINFREE=true
HDMINFREE=90


# Soll die Daten-Partition readonly gemountet werden,
# wenn wir sie nicht mehr brauchen?
MOUNT_RO=false
MOUNT_DEVICE=/dev/hdc1

# Liste von Dateipattern, die nicht gebackupt werden sollen
EXCLUDES=/root/backup/excludeliste-rsync

# Weitere Optionen für rsync. Ggf. macht eine Limitierung
# der Bandbreite Sinn, Angabe in kbyte/sec:
# EXTRAOPT="--bwlimit=256"
EXTRAOPT=""


# ### Lets Rock`n`Roll

# Pruefe auf freien Plattenplatz
GETPERCENTAGE='s/.* \([0-9]\{1,3\}\)%.*/\1/'
if $CHECK_HDMINFREE ; then
        KBISFREE=`df /$DATA_PATH | tail -n1 | sed -e "$GETPERCENTAGE"`
        INODEISFREE=`df -i /$DATA_PATH | tail -n1 | sed -e "$GETPERCENTAGE"`
        if [ $KBISFREE -ge $HDMINFREE -o $INODEISFREE -ge $HDMINFREE ] ; then
                echo "Fatal: Not enough space left for rsyncing backups!"
                logger "Fatal: Not enough space left for rsyncing backups!"
                exit
        fi
fi

# Festplatte rw remounten falls gewünscht!
if $MOUNT_RO ; then
        if `mount -o remount,rw $MOUNT_DEVICE $DATA_PATH` ; then
                echo "Error: Could not remount $MOUNT_DEV readwrite"
                logger "Error: Could not remount $MOUNT_DEV readwrite"
                exit
        fi
fi

# Ggf. Verzeichnis anlegen
if ! [ -d $DATA_PATH/$SERVER/$SERVERDIR/daily.0 ] ; then
        mkdir -p $DATA_PATH/$SERVER/daily.0/$SERVERDIR
fi

# Los geht`s: rsync zieht ein Vollbackup
echo "Starting rsync backup from $SERVER..."
logger "Starting rsync backup from $SERVER..."

rsync  -avz --numeric-ids $SSH --delete --delete-excluded \
        --exclude-from="$EXCLUDES"  $EXTRAOPT                   \
        $SSHSERVER/$SERVERDIR $DATA_PATH/$SERVER/daily.0/$SERVERDIR
#rsync  -avz --numeric-ids -e ssh --delete --delete-excluded   \
#        --exclude-from="$EXCLUDES"  $EXTRAOPT                   \
#        $SERVER:/ $DATA_PATH/$SERVER/$SERVERDIR/daily.0

# Ruekgabewert prüuefen.
# 0 = fehlerfrei,
# 24 ist harmlos; tritt auf, wenn während der Laufzeit
# von rsync noch (/tmp?) Dateien verändert oder gelöscht wurden.
# Alles andere ist fatal -- siehe man (1) rsync
RESULT=$?
if ! [ $RESULT = 24 -o $RESULT = 0 -o $RESULT = 23 ] ; then
        echo "Fatal: rsync finished $SERVER with errors!"
        logger "Fatal: rsync finished $SERVER with errors!"
#       echo "Error beim Backup des Servers $SERVER" | mailx -s "BACKUP-ERROR@$SERVER" kralisch@ingame.de -c thum@ingame.de -a "From: root@ingame.de"
        echo "Error $RESULT beim Backup des Servers $SERVER" > /tmp/rsync_msg
        cat /root/backup/rsync_results.txt >> /tmp/rsync_msg
        mailx -s "BACKUP-ERROR@$SERVER" nsk@uni-jena.de -c c5raho_@uni-jena.de,sven@kralisch.de -a "From: root@rhein.geogr.uni-jena.de" < /tmp/rsync_msg
        rm /tmp/rsync_msg
else
        # Fertig!
        echo "Finished rsync backup from $SERVER ($DATA_PATH/$SERVER/daily.0/$SERVERDIR)..."
        logger "Finished rsync backup from $SERVER ($DATA_PATH/$SERVER/daily.0/$SERVERDIR)..."
        echo "Backup des Servers $SERVER erfolgreich beendet" | mailx -s "BACKUP-SUCCESS@$SERVER" kralisch@ingame.de -a "From: root@ingame.de"
fi

# Verzeichnis anfassen, um Backup-Datum zu speichern
touch $DATA_PATH/$SERVER/daily.0/$SERVERDIR
touch $DATA_PATH/$SERVER/daily.0


# Sicher ist sicher...
#sync

# Festplatte ro remounten falls gewünscht!
if $MOUNT_RO ; then
        if `mount -o remount,ro $MOUNT_DEVICE $DATA_PATH` ; then
                echo "Error: Could not remount $MOUNT_DEV readonly"
                logger "Error: Could not remount $MOUNT_DEV readonly"
                exit
        fi
fi
